import * as xviewsdk from "./xviewsdk";
/**
 * YaoLiu
 * 组件化 ts sdk
 */
export class XviewSdk {
  /**
   * 单例模式 减少对象的创建
   */
  private constructor() { }
  private static _instance: XviewSdk;

  public static getInstance(): XviewSdk {
    if (this._instance == null) {
      this._instance = new XviewSdk();
    }
    return this._instance;
  }

  /**
  * 拒绝权限返回的参数 二次调用重试机制
  * @param _XviewData
  * @param callback
  */
  public exeNativeXViewFromNative(_xviewData: any) {
    if (window["xview"]) {
      window["xview"]["callNativeXView"](JSON.stringify(_xviewData));
    } else if (window["webkit"]) {
      window["webkit"].messageHandlers["callNativeXView"].postMessage(
        JSON.stringify(_xviewData)
      );
    } else {
      console.log("我是浏览器");
    }
  }
  /**
   * --------------------------------------------------- xview 组件 ----------------------------------------------------
   *
   */

  /**
   * 支付宝 组件功能
   */
  public ComponentAliPay = {
    Login: this.aliPayLogin,
    Pay: this.aliPayPay
  };

  /**
   * 微信 组件功能
   * 开放平台:
   * 注意申请 配置信息
   */
  public ComponentWeChat = {
    Login: this.weChatLogin,
    Share: this.weChatShare,
    Pay: this.weChatPay,
    Program: this.weChatProgram
  };

  /**
   * QQ 组件功能
   * 开放平台:
   * 注意申请 配置信息
   */
  public ComponentQQ = {
    Login: this.qqLogin,
    Share: this.qqShare
  };
  /**
   * 新浪 组件功能
   * 注意申请 配置信息
   */
  public ComponentSina = {
    Login: this.sinaLogin,
    Share: this.sinaShare
  };

  /**
   * 连连 组件功能
   * 注意申请 配置信息
   */
  public ComponentLianLian = {
    Sign: this.lianlianSign,
    Pay: this.lianlianPay,
    BankPay: this.lianlianBankPay
  };

  /**
   * 友盟 推送
   * 注意申请 配置信息
   */
  public ComponentPush = {
    Notification: this.pushNotification,
    NotificationClick: this.pushNotificatiOnClick,
    SetAlias: this.pushSetAlias,
    DeleteAlias: this.pushDeleteAlias,
    AddTag: this.pushAddTag,
    DeleteTag: this.pushDeleteTag,
    GetTags: this.pushGetTags
  };

  /**
   * 友盟 统计
   * 注意申请 配置信息
   */
  public ComponentAnalytics = {
    // 账号统计来源 成对统计
    OnProfileSignIn: this.analyticsOnProfileSignIn,
    OnProfileSignOff: this.analyticsOnProfileSignOff,
    //页面统计 成对
    OnPageStart: this.analyticsOnPageStart,
    OnPageEnd: this.analyticsOnPageEnd,
    //事件统计
    OnEvent: this.analyticsOnEvent
  };

  /**
   * 高德 导航
   * 注意申请 配置信息
   * 注意 科大讯飞 语音AppID
   *
   */
  public ComponentNavi = {
    Walking: this.naviWalking,
    Riding: this.naviRiding,
    Driving: this.naviDriving,
    Trunk: this.naviTrunk
  };

  /**
   * 高德 定位
   * 注意申请 配置信息
   */
  public ComponentLocation = {
    OnceLocation: this.locationOnce,
    KeepLocation: this.locationKeep,
    SetKeepLocationCallback: this.setLocationKeepCallback,
    StopKeep: this.locationStopKeep,
    StopSend: this.locationStopSend
  };

  /**
   * 多媒体文件选择
   * 拍照 选择视频 多图选择
   */
  public ComponentMedia = {
    Camera: this.mediaCamera,
    Photo: this.mediaPhoto,
    Video: this.mediaVideo
  };

  /**
   * 二维码
   */
  public ComponentQR = {
    // 扫一扫  //带图片选择
    Scan: this.qrScan,
    // 解析 base64 二维码
    Parse: this.qrParse,
    // 根据内容创建 二维码 条形码
    CreateQRCode: this.qrCreateQRCode,
    CreateBarCode: this.qrCreateBarCode
  };
  /**
   * 本地 操作
   * 小视频 录制播放
   */
  public ComponentVideo = {
    //显示原生录制界面
    Record: this.videoRecord,
    //开始播放
    Play: this.videoPlay
  };

  /**
   * 本地 操作
   * 音频 录制播放
   */
  public ComponentAudio = {
    //显示原生录制界面
    Record: this.audioRecord,
    //开始播放
    Start: this.audioStart,
    // 结束播放
    Stop: this.audioStop
  };

  /**
   * 网络请求
   */
  public ComponentNet = {
    HttpGet: this.netHttpGet,
    HttpPost: this.netHttpPost,
    FileDownload: this.netFileDownload,
    FileUpload: this.netFileUpload
  };

  /**
   * 手机组件功能
   * 打开通讯录
   * 打电话
   * 发短信
   * 闪光灯 开 关
   * 剪切板
   */
  public ComponentMobile = {
    JumpBrowser: this.mobileJumpBrowser,
    Contacts: this.mobileContacts,
    CallPhone: this.mobileCallPhone,
    SendSMS: this.mobileSendSMS,
    Clipboard: this.mobileClipboard,
    ScreenShot: this.mobileScreenShot,
    FlashLamp: this.mobileFlashLamp
  };

  /**
   * 杀死 app  隐藏 app
   * 尽量不要用杀死 app 除非需要
   */
  public ComponentApp = {
    SaveImage: this.appSaveImage,
    JumpWeb: this.appJumpWeb,
    Exit: this.appExit,
    Hide: this.appHide,
    Permission: this.appPermission,
    OnBack: this.appOnBack,
    CleanCache: this.appCleanCache,
    GetCacheSize: this.appGetCacheSize,
    getStatusBarHeight: this.appGetStatusBarHeight
  };

  /**
   * Android 端 版本更新
   */
  public ComponentUpdate = {
    APK: this.updateAPK,
    WWW: this.updateWWW,
    VersionCode: this.updateVersionCode,
    VersionName: this.updateVersionName
  };

  /**
   * --------------------------------------------------- xview 组件 end ----------------------------------------------------
   */


  /**
   *  -------------------------------------------------- aliPay 组件 功能 --------------------------------------------------
   * 支付宝 登录
   * @param _data
   * let _data = {
   *  aliLogin="生成的登录数据"
   * }
   */
  private aliPayLogin(_data: any): XviewData {
    return new XviewData("ComponentAliPay", "Login", null, _data);
  }

  /**
   * 支付宝 支付
     * @param _data
   * let _data = {
   *  aliPay="生成的支付数据"
   * }
   */
  private aliPayPay(_data: any): XviewData {
    return new XviewData("ComponentAliPay", "Pay", null, _data);
  }

  /**
   * -------------------------------------------------- WeChat 组件 功能 --------------------------------------------------
   * 注意apk签名文件MD5值和开放平台是否一致，包名是否一致 记录信息  AppSecret 和 appid 要截图保存一份
   */

  /**
   * 微信 登录
   * @param _data
   *  let _data = {
   *  appId:(微信移动端appid"),
   *  appKey:(AppSecret 在appid 下面密钥的值 注意保存)
   *  };
   *
   */
  private weChatLogin(_data: any): XviewData {
    return new XviewData("ComponentWeChat", "Login", null, _data);
  }
  /**
   * 微信 分享
   */
  private weChatShare(_data: any): XviewData {
    return new XviewData("ComponentWeChat", "Share", null, _data);
  }

  /* 微信 支付
   * appId
   * appKey
   */
  private weChatPay(_data: any): XviewData {
    return new XviewData("ComponentWeChat", "Pay", null, _data);
  }

  /* 微信 打开小程序
   * appId
   */
  private weChatProgram(_data: any): XviewData {
    return new XviewData("ComponentWeChat", "Program", null, _data);
  }



  /**
   * -------------------------------------------------- QQ 组件 功能 --------------------------------------------------
   * QQ 登录
   *let loginData = { appId: "", appKey: "" };
   */
  private qqLogin(_data: any): XviewData {
    return new XviewData("ComponentQQ", "Login", null, _data);
  }
  /**
   * QQ 分享
   */
  private qqShare(_data: any): XviewData {
    return new XviewData("ComponentQQ", "Share", null, _data);
  }

  /**
   * -------------------------------------------------- Sina 组件 功能 --------------------------------------------------
   * 新浪 登录
   * let loginData = {appId: "(App Key)", appKey: "(App Secret)",redirectUrl: "平台上默认地址"};
   */
  private sinaLogin(_data: any): XviewData {
    return new XviewData("ComponentSina", "Login", null, _data);
  }
  /**
   * 新浪 分享
   * appId
   * appKey
   * redirectUrl
   */
  private sinaShare(_data: any): XviewData {
    return new XviewData("ComponentSina", "Share", null, _data);
  }


  /**
   *  -------------------------------------------------- 连连 组件 功能 --------------------------------------------------
   * 连连 签约
   */
  private lianlianSign(_data: any): XviewData {
    return new XviewData("ComponentLianLian", "Sign", [
      "android.permission.READ_PHONE_STATE"
    ], _data);
  }

  /**
   * 连连 支付
   */
  private lianlianPay(_data: any): XviewData {
    return new XviewData("ComponentLianLian", "Pay", [
      "android.permission.READ_PHONE_STATE"
    ], _data);
  }

  /**
   * 连连 银联支付
   * payData
   */
  private lianlianBankPay(_data: any): XviewData {
    return new XviewData("ComponentLianLian", "BankPay", [
      "android.permission.READ_PHONE_STATE"
    ], _data);
  }

  /**
   * -------------------------------------------------------- umeng 推送 组件 功能 ----------------------------------------------
   */

  /**
   *push 通知监听 通知 到来 处理UI展示
   */
  private pushNotification(_callback: Function): void {
    window["ComponentPushNotification"] = _callback;
  }
  /**
   * 监听 点击 通知 触发的 方法
   * 参数 与 通知里的一样 注意处理逻辑
   * 可与广告图 点击事件统一处理
   */
  private pushNotificatiOnClick(_callback: Function): void {
    window["ComponentPushNotificationOnClick"] = _callback;
  }

  /**
   * 友盟 设置别名
   * alias
   * aliasType
   */
  private pushSetAlias(_data: any): XviewData {
    return new XviewData("ComponentPush", "SetAlias", null, _data);
  }
  /**
   * 友盟 删除 别名
   * alias
   * aliasType
   */
  private pushDeleteAlias(_data: any): XviewData {
    return new XviewData("ComponentPush", "DeleteAlias", null, _data);
  }
  /**
   * 友盟 添加标签
   * tag array
   */
  private pushAddTag(_data: any): XviewData {
    return new XviewData("ComponentPush", "AddTag", null, _data);
  }
  /**
   *删除标签 array
   */
  private pushDeleteTag(_data: any): XviewData {
    return new XviewData("ComponentPush", "DeleteTag", null, _data);
  }
  /**
   *获取全部标签 array
   */
  private pushGetTags(): XviewData {
    return new XviewData("ComponentPush", "GetTags", null, null);
  }

  /**
   * -------------------------------------------------------- umeng 统计 组件 功能 ----------------------------------------------
   */

  /**
   *
   * 统计账号
   * ID	用户账号ID，长度小于64字节
   * Provider	账号来源。如果用户通过第三方账号登陆，可以调用此接口进行统计。支持自定义，
   * 不能以下划线”_”开头，使用大写字母和数字标识，长度小于32 字节; 如果是上市
   * 公司，建议使用股票代码。
   *
   * 当用户使用自有账号登录时，可以这样统计：
   * MobclickAgent.onProfileSignIn("userID");
   *
   * 当用户使用第三方账号（如新浪微博）登录时，可以这样统计：
   * MobclickAgent.onProfileSignIn("WB"，"userID");
   */
  private analyticsOnProfileSignIn(_data: any): XviewData {
    return new XviewData("ComponentAnalytics", "OnProfileSignIn", null, _data).setIsAsync(false);
  }
  /**
   * 友盟 统计账号 登出
   */
  private analyticsOnProfileSignOff(): XviewData {
    return new XviewData("ComponentAnalytics", "OnProfileSignOff", null, null).setIsAsync(false);
  }
  /**
   * 友盟 页面统计
   *  进入 页面
   * pageName
   */
  private analyticsOnPageStart(_data: any): XviewData {
    return new XviewData("ComponentAnalytics", "OnPageStart", null, _data).setIsAsync(false);
  }
  /**
   * 友盟 页面统计
   * 离开 页面
   * pageName
   */
  private analyticsOnPageEnd(_data: any): XviewData {
    return new XviewData("ComponentAnalytics", "OnPageEnd", null, _data).setIsAsync(false);
  }
  /**
   * 友盟 统计事件
   * eventID
   * label（JSON）
   */
  private analyticsOnEvent(_data: any): XviewData {
    return new XviewData("ComponentAnalytics", "OnEvent", null, _data).setIsAsync(false);
  }
  /**
   * -------------------------------------------------- 高德 导航 组件 ----------------------------------------
   * 高德步行 导航 注意 距离限制
   */
  private naviWalking(_data: any): XviewData {
    return new XviewData("ComponentNavi", "Walking", [
      "android.permission.ACCESS_COARSE_LOCATION",
      "android.permission.ACCESS_FINE_LOCATION",
      "android.permission.WRITE_EXTERNAL_STORAGE"
    ], _data);
  }
  /**
   *高德骑行导航  注意距离限制
   * eventID
   * label（JSON）
   */
  private naviRiding(_data: any): XviewData {
    return new XviewData("ComponentNavi", "Riding", [
      "android.permission.ACCESS_COARSE_LOCATION",
      "android.permission.ACCESS_FINE_LOCATION",
      "android.permission.WRITE_EXTERNAL_STORAGE"
    ], _data);
  }
  /**
   * 高德 驾车 注意货车收费问题
   * pageName
   */
  private naviDriving(_data: any): XviewData {
    return new XviewData("ComponentNavi", "Driving", [
      "android.permission.ACCESS_COARSE_LOCATION",
      "android.permission.ACCESS_FINE_LOCATION",
      "android.permission.WRITE_EXTERNAL_STORAGE"
    ], _data);
  }
  /**
   * 高德 货车 注意货车收费问题
   * 项目需要再重新升级sdk
   */
  private naviTrunk(_data: any): XviewData {
    return new XviewData("ComponentNavi", "Trunk", [
      "android.permission.ACCESS_COARSE_LOCATION",
      "android.permission.ACCESS_FINE_LOCATION",
      "android.permission.WRITE_EXTERNAL_STORAGE"
    ], _data);
  }
  /**
   * -------------------------------------------------- 高德 定位 组件 ----------------------------------------
   *高德 单次 定位 注意 掉完 关闭定位 如果不再使用
   */
  private locationOnce(): XviewData {
    return new XviewData("ComponentLocation", "Once", [
      "android.permission.ACCESS_COARSE_LOCATION",
      "android.permission.ACCESS_FINE_LOCATION",
      "android.permission.WRITE_EXTERNAL_STORAGE"
    ], null);
  }
  /**
   *高德 持续定位 注意离开页面不要接受数据 StopKeep  定位并未销毁 只向后台发送数据
   */
  private locationKeep(_data: any): XviewData {
    return new XviewData("ComponentLocation", "Keep", [
      "android.permission.ACCESS_COARSE_LOCATION",
      "android.permission.ACCESS_FINE_LOCATION",
      "android.permission.WRITE_EXTERNAL_STORAGE"
    ], _data);
  }

  /**
   *高德 持续定位  前端监听展示
   */
  private setLocationKeepCallback(_callback: Function): void {
    window["ComponentLocationKeep"] = _callback;
  }

  /**
   * 销毁定位 服务 不再 发送数据
   */
  private locationStopKeep(): XviewData {
    return new XviewData("ComponentLocation", "StopKeep", null, null);
  }
  /**
   *高德 持续定位 注意前台离开页面不要接受数据 StopSend  定位并未销毁 只向后台发送数据
   */
  private locationStopSend(): XviewData {
    return new XviewData("ComponentLocation", "StopSend", null, null);
  }

  /**
   * ------------------------------------------------- 多媒体 文件 选择----------------------------------
   *
   * 相机拍照
   */
  private mediaCamera(_data?: any): XviewData {
    return new XviewData("ComponentMedia", "Camera", [
      "android.permission.CAMERA",
      "android.permission.WRITE_EXTERNAL_STORAGE"
    ], _data);
  }
  /**
   *多图选择 最大 9 张 base64
   */
  private mediaPhoto(_data?: any): XviewData {
    return new XviewData("ComponentMedia", "Photo", [
      "android.permission.WRITE_EXTERNAL_STORAGE"
    ], _data);
  }
  /**
   *文件时间限制  时间限制 5 ~ 15 秒
   */
  private mediaVideo(_data: any): XviewData {
    return new XviewData("ComponentMedia", "Video", [
      "android.permission.WRITE_EXTERNAL_STORAGE"
    ], _data);
  }
  /**
   * ------------------------------------------------- 二维码 组件----------------------------------
   *
  /**
   * 扫一扫
   * 带图片 选择 闪光灯 title 自定义
   */
  private qrScan(_data?: any): XviewData {
    return new XviewData("ComponentQR", "Scan", [
      "android.permission.CAMERA",
      "android.permission.WRITE_EXTERNAL_STORAGE"
    ], _data);
  }
  /**
   * base64 图片解析不带前缀
   */
  private qrParse(_data: any): XviewData {
    return new XviewData("ComponentQR", "Parse", [
      "android.permission.WRITE_EXTERNAL_STORAGE"
    ], _data);
  }
  /**
   * 根据内容创建二维码 base64返回 .png
   *  content: "www.baidu.com",
      height: 500,
      logoBase64:可选参数
   */
  private qrCreateQRCode(_data: any): XviewData {
    return new XviewData("ComponentQR", "CreateQRCode", [
      "android.permission.WRITE_EXTERNAL_STORAGE"
    ], _data);
  }
  /**
   * 创建条形码
    *  content: "12321321321",
    *  height: 200,
    *  width: 800
    */
  private qrCreateBarCode(_data: any): XviewData {
    return new XviewData("ComponentQR", "CreateBarCode", [
      "android.permission.WRITE_EXTERNAL_STORAGE"
    ], _data);
  }
  /**
   * -------------------------------------------------本地 音频 组件----------------------------------
  /

  /**
   * 本地 操作
   * 音频 录制播放
   * 录制完成返回 audioPath 使用
   */

  private audioRecord(_data: any): XviewData {
    return new XviewData("ComponentAudio", "Record", [
      "android.permission.WRITE_EXTERNAL_STORAGE",
      "android.permission.RECORD_AUDIO"
    ], _data);
  }
  /**
   * 播放 audioPath
   */
  private audioStart(_data: any): XviewData {
    return new XviewData("ComponentAudio", "Start", [
      "android.permission.WRITE_EXTERNAL_STORAGE",
      "android.permission.RECORD_AUDIO"
    ], _data);
  }
  /**
   * 停止 audioPath
   */
  private audioStop(_data: any): XviewData {
    return new XviewData("ComponentAudio", "Stop", null, _data);
  }

  /**
   * -------------------------------------------------本地 视频 组件----------------------------------
  /

  /**
   * 尺寸  时长  默认 .mp4 文件
   * {
   * maxTime(秒)
   * minTime（秒）
   *
   * 默认 不需要前端传
   * wide：宽 720
   * high：高 1280
   * }
   *
   * 返回参数
   * imageBase64 前端 直接展示带前缀的 格式 所有均 png
     imagePath; 缩略图路径 原生上传使用
     videoPath; 视频文件路径 原生 播放 上传时使用
   */

  private videoRecord(_data: any): XviewData {
    return new XviewData("ComponentVideo", "Record", [
      "android.permission.CAMERA",
      "android.permission.RECORD_AUDIO",
      "android.permission.WRITE_EXTERNAL_STORAGE"
    ], _data);
  }
  /**
   * videoPath
   */
  private videoPlay(_data: any): XviewData {
    return new XviewData("ComponentVideo", "Play", [
      "android.permission.READ_EXTERNAL_STORAGE"
    ], _data);
  }

  /**
   * ------------------------------------------------- 原生网络请求 ----------------------------------
   */
  /**
   *
   * @param _data get 请求
   * heard parmas
   */
  private netHttpGet(_data: any): XviewData {
    return new XviewData("ComponentNet", "HttpGet", null, _data);
  }
  /**
   *Post 请求
   */
  private netHttpPost(_data: any): XviewData {
    return new XviewData("ComponentNet", "HttpPost", null, _data);
  }
  /**
   * 文件 下载 后期文件操作使用 我的文件库
   */
  private netFileDownload(_data: any): XviewData {
    return new XviewData("ComponentNet", "FileDownload", [
      "android.permission.WRITE_EXTERNAL_STORAGE"
    ], _data);
  }
  /**
   *文件上传 根据 选择 原生 文件路径
   */
  private netFileUpload(_data: any): XviewData {
    return new XviewData("ComponentNet", "FileUpload", [
      "android.permission.READ_EXTERNAL_STORAGE"
    ], _data);
  }

  /**
   * ------------------------------------------------- 手机自带 功能 ----------------------------------
   */

  /**
   * 打开联系人 选取联系人
   */
  private mobileContacts(): XviewData {
    return new XviewData("ComponentMobile", "Contacts", [
      "android.permission.READ_CONTACTS"
    ], null);
  }
  /**
   *打电话 无需权限
   tel
   */
  private mobileCallPhone(_data: any): XviewData {
    return new XviewData("ComponentMobile", "CallPhone", null, _data).setIsAsync(false);
  }
  /**
   *发送短息到指定号码 带消息过去
   sms
   */
  private mobileSendSMS(_data: any): XviewData {
    return new XviewData("ComponentMobile", "SendSMS", null, _data).setIsAsync(false);
  }

  /**
   *复制到剪切板
   */
  private mobileClipboard(_data: any): XviewData {
    return new XviewData("ComponentMobile", "Clipboard", null, _data).setIsAsync(false);
  }
  /**
   * * 跳转浏览器
   * url
   */
  private mobileJumpBrowser(_data: any): XviewData {
    return new XviewData(
      "ComponentMobile",
      "JumpBrowser",
      _data
    ).setIsAsync(false);
  }

  /**
   * 截取屏幕
   * title
   * url
   * @param _data
   */
  private mobileScreenShot(): XviewData {
    return new XviewData("ComponentMobile", "ScreenShot", null);
  }
  /**
   * 打开闪光灯
   * title
   * url
   * @param _data
   */
  private mobileFlashLamp(): XviewData {
    return new XviewData("ComponentMobile", "FlashLamp", null);
  }

  /**
   *
   * @param _data ------------------------------------------------- app 自带 功能 ----------------------------------
   */

  /**
   * 获取缓存大小
   *size MB
   * @param _data
   */
  private appGetCacheSize(): XviewData {
    return new XviewData("ComponentApp", "GetCacheSize", [
      "android.permission.READ_EXTERNAL_STORAGE"
    ], null).setIsAsync(false);
  }
  /**
   * 获取状态栏高度
   * Android
   * @param _data
   */
  private appGetStatusBarHeight(): XviewData {
    return new XviewData(
      "ComponentApp",
      "GetStatusBarHeight",
      null
    ).setIsAsync(false);
  }
  /**
   * 清除缓存
   * @param _data
   */
  private appCleanCache(): XviewData {
    return new XviewData("ComponentApp", "CleanCache", [
      "android.permission.READ_EXTERNAL_STORAGE"
    ], null);
  }

  /**
   * 保存图片
   * @param _data
   * 可以添加 水印
   */
  private appSaveImage(_data: any): XviewData {
    return new XviewData("ComponentApp", "SaveImage", [
      "android.permission.WRITE_EXTERNAL_STORAGE"
    ], _data);
  }
  /**
   * 跳转app 界面 展示 一般文章
   * title
   * url
   * @param _data
   */
  private appJumpWeb(_data: any): XviewData {
    return new XviewData("ComponentApp", "JumpWeb", null, _data);
  }

  /**
   *app真实退出 会整个 杀死关闭
   */
  private appExit(): XviewData {
    return new XviewData("ComponentApp", "Exit", null);
  }
  /**
   *app 只是退到后台
   */
  private appHide(): XviewData {
    return new XviewData("ComponentApp", "Hide", null);
  }

  /**
   * 请求权限被拒
   * @param _callback
   */
  private appPermission(_callback: Function): void {
    window["ComponentAppPermission"] = _callback;
  }
  /**
   *android 特有方法
   * @param _callback 原生返回键监听注册
   */
  private appOnBack(_callback: Function) {
    window["ComponentAppOnBack"] = _callback;
  }

  /**
   * ------------------------------------------------- Android 版本更新 功能 ----------------------------------

   */
  private updateAPK(_data: any): XviewData {
    return new XviewData("ComponentUpdate", "APK", [
      "android.permission.WRITE_EXTERNAL_STORAGE"
    ], _data);
  }
  /**
   *后期测试 只更新 www 包
   */
  private updateWWW(_data: any): XviewData {
    return new XviewData("ComponentUpdate", "WWW", [
      "android.permission.WRITE_EXTERNAL_STORAGE"
    ], _data);
  }
  /**
   *实际版本更新 使用判断的
    false 表示 原生 直接 同步 返回 数据
    true 需要异步等待
   */
  private updateVersionCode(): XviewData {
    return new XviewData(
      "ComponentUpdate",
      "VersionCode",
      null
    ).setIsAsync(false);
  }
  /**
   *展示 app 版本名字
   */
  private updateVersionName(): XviewData {
    return new XviewData(
      "ComponentUpdate",
      "VersionName",
      null
    ).setIsAsync(false);
  }
}

export class XviewData {
  // 组件名称
  private componentName: string;
  //组件功能
  private action: string;
  //功能参数
  private data: null;
  // 是否 异步 回调
  private isAsync: boolean = true;

  private permission: any = null;

  constructor(
    _componentName: string,
    _action: string,
    _permission: any,
    _data?: any,
  ) {
    this.componentName = _componentName;
    this.action = _action;
    if (_data) {
      this.data = _data;
    }
    if (_permission) {
      this.permission = _permission;
    }
  }

  public get ComponentName() {
    return this.componentName;
  }
  public get Action() {
    return this.action;
  }

  public get Data() {
    return this.data;
  }

  public get IsAsync() {
    return this.isAsync;
  }

  public setIsAsync(_isAsync: boolean): XviewData {
    this.isAsync = _isAsync;
    return this;
  }
  public setPermission(_permission: any): XviewData {
    this.permission = _permission;
    return this;
  }
  public get Permission() {
    return this.permission;
  }
  /**
   * 注册js回调方法
   * @param callbackName
   * @param callbackFunction
   */
  private registerWindowFunctionCallback(
    callbackName: string
  ): Promise<XviewResult> {
    return new Promise<XviewResult>((resolve, reject) => {
      window[callbackName] = (_result: XviewResult) => {
        resolve(_result);
      };
    });
  }

  /**
    注册回调
   */
  public callNativeXView(): Promise<XviewResult> {
    let registerFuncation = this.registerWindowFunctionCallback(
      this.ComponentName + this.Action // 回调方法名称
    );
    this.exeNativeXView();
    return registerFuncation;
  }

  /**
   * 执行原生方法
   * @param _XviewData
   * @param callback
   */
  private exeNativeXView() {
    if (window["xview"]) {
      window["xview"]["callNativeXView"](JSON.stringify(this));
    } else if (window["webkit"]) {
      window["webkit"].messageHandlers["callNativeXView"].postMessage(
        JSON.stringify(this)
      );
    } else {
      console.log("我是浏览器");
    }
  }
}

/**
 * code == 0 成功 -1： 错误 1： 取消
 */
export class XviewResult {
  code: number = 101;
  data: any;
  message: string;
}
